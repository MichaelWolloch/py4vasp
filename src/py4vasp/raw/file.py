from contextlib import AbstractContextManager
import h5py
import py4vasp.raw as raw


class File(AbstractContextManager):
    """ Extract raw data from the HDF5 file.

    This class opens a given HDF5 file and its functions then provide access to
    the raw data via dataclasses. When you request the dataclass for a certain
    quantity, this class will generate the necessary pointers to the relevant
    HDF5 datasets, which can then be accessed like numpy arrays.

    This class also extends a context manager so it can be used to automatically
    deal with closing the HDF5 file. You cannot access the data in the
    dataclasses after you closed the HDF5 file.

    Parameters
    ----------
    filename : str
        Name of the file from which the data is read (defaults to default_filename).

    Notes
    -----
    Except for scalars this class does not actually load the data from file. It
    only creates a pointer to the correct position in the HDF5 file. So you need
    to extract the data before closing the file. This lazy loading significantly
    enhances the performance if you are only interested in a subset of the data.
    """

    default_filename = "vaspout.h5"
    "Name of the HDF5 file Vasp creates."

    def __init__(self, filename=None):
        filename = filename or File.default_filename
        self._h5f = h5py.File(filename, "r")
        self.closed = False

    def dos(self):
        """ Read the electronic density of states (Dos).

        Returns
        -------
        raw.Dos
            A list of energies E and the associated raw electronic Dos D(E). The
            energies need to be manually shifted to the Fermi energy. If
            available, the projections on a set of projectors are included.
        """
        self._assert_not_closed()
        return raw.Dos(
            fermi_energy=self._h5f["results/electron_dos/efermi"][()],
            energies=self._h5f["results/electron_dos/energies"],
            dos=self._h5f["results/electron_dos/dos"],
            projectors=self.projectors(),
            projections=self._safe_get_key("results/electron_dos/dospar"),
        )

    def band(self):
        """ Read the band structure generated by Vasp.

        Returns
        -------
        raw.Band
            The raw electronic eigenvalues at the specific **k** points. These
            values need to be manually aligned to the Fermi energy if desired.
            If available the projections on a set of projectors are included.
        """
        self._assert_not_closed()
        return raw.Band(
            fermi_energy=self._h5f["results/electron_dos/efermi"][()],
            kpoints=self.kpoints(),
            eigenvalues=self._h5f["results/electron_eigenvalues/eigenvalues"],
            projectors=self.projectors(),
            projections=self._safe_get_key("results/projectors/par"),
        )

    def topology(self):
        self._assert_not_closed()
        return raw.Topology(
            ion_types=self._h5f["results/positions/ion_types"],
            number_ion_types=self._h5f["results/positions/number_ion_types"],
        )

    def trajectory(self):
        self._assert_not_closed()
        return raw.Trajectory(
            topology=self.topology(),
            positions=self._h5f["intermediate/history/position_ions"],
            lattice_vectors=self._h5f["intermediate/history/lattice_vectors"],
        )

    def projectors(self):
        """Read the projectors information if present.

        Returns
        -------
        raw.Projectors or None
            If Vasp was set to produce the orbital decomposition of the bands
            the associated projector information is returned.
        """
        self._assert_not_closed()
        if "results/projectors" not in self._h5f:
            return None
        return raw.Projectors(
            topology=self.topology(),
            orbital_types=self._h5f["results/projectors/lchar"],
            number_spins=self._h5f["results/electron_eigenvalues/ispin"][()],
        )

    def kpoints(self):
        """ Read the **k** points at which Vasp evaluated the wave functions.

        Returns
        -------
        raw.Kpoints
            In addition to the coordinates of the **k** points and the cell
            information, we include some information given in the input file
            about the generation and labels of the **k** points, which may be
            useful for band structures.
        """
        self._assert_not_closed()
        return raw.Kpoints(
            mode=self._h5f["input/kpoints/mode"][()],
            number=self._h5f["input/kpoints/number_kpoints"][()],
            coordinates=self._h5f["results/electron_eigenvalues/kpoint_coords"],
            weights=self._h5f["results/electron_eigenvalues/kpoints_symmetry_weight"],
            labels=self._safe_get_key("input/kpoints/labels_kpoints"),
            label_indices=self._safe_get_key("input/kpoints/positions_labels_kpoints"),
            cell=self.cell(),
        )

    def cell(self):
        """ Read the unit cell information of the crystal.

        Returns
        -------
        raw.Cell
            The lattice vectors of the unit cell scaled by a constant factor.
        """
        self._assert_not_closed()
        return raw.Cell(
            scale=self._h5f["results/positions/scale"][()],
            lattice_vectors=self._h5f["results/positions/lattice_vectors"],
        )

    def structure(self):
        """ Read the structure information.

        Returns
        -------
        raw.Structure
        """
        self._assert_not_closed()
        return raw.Structure(
            topology=self.topology(),
            cell=self.cell(),
            positions=self._h5f["results/positions/position_ions"],
        )

    def energy(self):
        """ Read the energies during the ionic convergence.

        Returns
        -------
        raw.Energy
            Information about different energies for every step in the relaxation
            or MD simulation.
        """
        self._assert_not_closed()
        return raw.Energy(
            labels=self._h5f["intermediate/history/energies_tags"],
            values=self._h5f["intermediate/history/energies"],
        )

    def close(self):
        "Close the associated HDF5 file (automatically if used as context manager)."
        self._h5f.close()
        self.closed = True

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def _assert_not_closed(self):
        assert not self.closed, "I/O operation on closed file."

    def _safe_get_key(self, key):
        if key in self._h5f:
            return self._h5f[key]
        else:
            return None
